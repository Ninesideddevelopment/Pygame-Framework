[
    {
        "label": "Component",
        "importPath": "framework.components.default_component",
        "description": "framework.components.default_component",
        "isExtraImport": true,
        "detail": "framework.components.default_component",
        "documentation": {}
    },
    {
        "label": "Vector2",
        "importPath": "pygame.math",
        "description": "pygame.math",
        "isExtraImport": true,
        "detail": "pygame.math",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "StartUp",
        "importPath": "framework.core.startup_class",
        "description": "framework.core.startup_class",
        "isExtraImport": true,
        "detail": "framework.core.startup_class",
        "documentation": {}
    },
    {
        "label": "RunTime",
        "importPath": "framework.core.runtime_class",
        "description": "framework.core.runtime_class",
        "isExtraImport": true,
        "detail": "framework.core.runtime_class",
        "documentation": {}
    },
    {
        "label": "return_flags",
        "importPath": "framework.underhood.flags_handler",
        "description": "framework.underhood.flags_handler",
        "isExtraImport": true,
        "detail": "framework.underhood.flags_handler",
        "documentation": {}
    },
    {
        "label": "Window_Manager",
        "importPath": "framework.windows.window_manager",
        "description": "framework.windows.window_manager",
        "isExtraImport": true,
        "detail": "framework.windows.window_manager",
        "documentation": {}
    },
    {
        "label": "Window_Manager",
        "importPath": "framework.windows.window_manager",
        "description": "framework.windows.window_manager",
        "isExtraImport": true,
        "detail": "framework.windows.window_manager",
        "documentation": {}
    },
    {
        "label": "Window_Manager",
        "importPath": "framework.windows.window_manager",
        "description": "framework.windows.window_manager",
        "isExtraImport": true,
        "detail": "framework.windows.window_manager",
        "documentation": {}
    },
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "framework.components",
        "description": "framework.components",
        "isExtraImport": true,
        "detail": "framework.components",
        "documentation": {}
    },
    {
        "label": "Game_Object",
        "importPath": "framework.game_object.game_object",
        "description": "framework.game_object.game_object",
        "isExtraImport": true,
        "detail": "framework.game_object.game_object",
        "documentation": {}
    },
    {
        "label": "Game_Object",
        "importPath": "framework.game_object.game_object",
        "description": "framework.game_object.game_object",
        "isExtraImport": true,
        "detail": "framework.game_object.game_object",
        "documentation": {}
    },
    {
        "label": "Game_Object",
        "importPath": "framework.game_object.game_object",
        "description": "framework.game_object.game_object",
        "isExtraImport": true,
        "detail": "framework.game_object.game_object",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "framework.windows.window",
        "description": "framework.windows.window",
        "isExtraImport": true,
        "detail": "framework.windows.window",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "framework.windows.window",
        "description": "framework.windows.window",
        "isExtraImport": true,
        "detail": "framework.windows.window",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "framework.windows.window",
        "description": "framework.windows.window",
        "isExtraImport": true,
        "detail": "framework.windows.window",
        "documentation": {}
    },
    {
        "label": "Scene",
        "importPath": "framework.scenes.scene",
        "description": "framework.scenes.scene",
        "isExtraImport": true,
        "detail": "framework.scenes.scene",
        "documentation": {}
    },
    {
        "label": "Scene",
        "importPath": "framework.scenes.scene",
        "description": "framework.scenes.scene",
        "isExtraImport": true,
        "detail": "framework.scenes.scene",
        "documentation": {}
    },
    {
        "label": "Events_Handler",
        "importPath": "framework.core.events_handler",
        "description": "framework.core.events_handler",
        "isExtraImport": true,
        "detail": "framework.core.events_handler",
        "documentation": {}
    },
    {
        "label": "Events_Handler",
        "importPath": "framework.core.events_handler",
        "description": "framework.core.events_handler",
        "isExtraImport": true,
        "detail": "framework.core.events_handler",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "framework",
        "description": "framework",
        "isExtraImport": true,
        "detail": "framework",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "framework.core.engine_class",
        "description": "framework.core.engine_class",
        "isExtraImport": true,
        "detail": "framework.core.engine_class",
        "documentation": {}
    },
    {
        "label": "CFrame_Component",
        "kind": 6,
        "importPath": "framework.components.CFrame_component",
        "description": "framework.components.CFrame_component",
        "peekOfCode": "class CFrame_Component(Component):\n    \"\"\"A component that represents a CFrame, which is a coordinate frame with position, rotation, and size.\"\"\"\n    def __init__(self, position: Vector2 = Vector2(0, 0), rotation: int = 0, size: Vector2 = Vector2(0, 0), *args, **kwargs) -> None:\n        from pygame.math import Vector2\n        super().__init__(*args, **kwargs)\n        self.x: float = int(position.x)\n        self.y: float = int(position.y)\n        self.rotation: int = rotation\n        self.size: Vector2 = size\n    def set_position(self, position: Vector2) -> None:",
        "detail": "framework.components.CFrame_component",
        "documentation": {}
    },
    {
        "label": "Component",
        "kind": 6,
        "importPath": "framework.components.default_component",
        "description": "framework.components.default_component",
        "peekOfCode": "class Component:\n    def __init__(self, game_object: \"Game_Object\") -> None:\n        self.game_object = game_object",
        "detail": "framework.components.default_component",
        "documentation": {}
    },
    {
        "label": "Image_Component",
        "kind": 6,
        "importPath": "framework.components.image_component",
        "description": "framework.components.image_component",
        "peekOfCode": "class Image_Component(Component):\n    \"\"\"A component that represents an image for a game object, which can be rendered on a surface.\"\"\"\n    def __init__(self, image_path: str, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self.image_path = image_path\n        self.image = pygame.image.load(image_path)\n        if self.image.get_alpha() is None:\n            self.image = self.image.convert()\n        else:\n            self.image = self.image.convert_alpha()",
        "detail": "framework.components.image_component",
        "documentation": {}
    },
    {
        "label": "Velocity_Component",
        "kind": 6,
        "importPath": "framework.components.velocity_component",
        "description": "framework.components.velocity_component",
        "peekOfCode": "class Velocity_Component:\n    \"\"\"\n    A component that manages the velocity of a game object.\n    \"\"\"\n    def __init__(self, x: float = 0.0, y: float = 0.0) -> None:\n        self.x = x\n        self.y = y",
        "detail": "framework.components.velocity_component",
        "documentation": {}
    },
    {
        "label": "ComponentContainer",
        "kind": 6,
        "importPath": "framework.containers.component_container",
        "description": "framework.containers.component_container",
        "peekOfCode": "class ComponentContainer(DefaultContainer):\n    \"\"\"A class created specifically to hold components for game objects, to avoid messy attributes.\"\"\"\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)",
        "detail": "framework.containers.component_container",
        "documentation": {}
    },
    {
        "label": "DefaultContainer",
        "kind": 6,
        "importPath": "framework.containers.default_container",
        "description": "framework.containers.default_container",
        "peekOfCode": "class DefaultContainer:\n    \"\"\"A class created specifically to hold objects for other classes, to avoid messy attributes.\"\"\"\n    def __init__(self) -> None:\n        pass",
        "detail": "framework.containers.default_container",
        "documentation": {}
    },
    {
        "label": "ObjectContainer",
        "kind": 6,
        "importPath": "framework.containers.object_container",
        "description": "framework.containers.object_container",
        "peekOfCode": "class ObjectContainer(DefaultContainer):\n    \"\"\"A class created specifically to hold game objects for other classes, to avoid messy attributes.\"\"\"\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)",
        "detail": "framework.containers.object_container",
        "documentation": {}
    },
    {
        "label": "Engine",
        "kind": 6,
        "importPath": "framework.core.engine_class",
        "description": "framework.core.engine_class",
        "peekOfCode": "class Engine:\n    def __init__(self, startupfile: str, runtimefile: str) -> None:\n        self.WINDOW_MANAGER: \"Window_Manager\"\n        self.EVENTS_HANDLER: \"Events_Handler\"\n        self.startup = StartUp(engine=self, startupfile=startupfile)\n        self.runtime = RunTime(engine=self, runtimefile=runtimefile)\n    def play(self):\n        \"\"\"\n        Starts the game engine by initializing the startup process and running the runtime loop.\n        \"\"\"",
        "detail": "framework.core.engine_class",
        "documentation": {}
    },
    {
        "label": "Events_Handler",
        "kind": 6,
        "importPath": "framework.core.events_handler",
        "description": "framework.core.events_handler",
        "peekOfCode": "class Events_Handler:\n    def __init__(self) -> None:\n        self.KeyCodes: dict(\"key\", \"value\") = {}\n    def handle_events(self, window_manager: Window_Manager, flags: str = \"WINDOWCLOSE | QUIT\") -> None:\n        flags_list = return_flags(flags=flags)\n        for event in pygame.event.get():\n            if event.type == pygame.WINDOWCLOSE and \"WINDOWCLOSE\" in flags_list:\n                window_manager.remove_window(event.window.title)\n                event.window.destroy()\n            if event.type == pygame.QUIT and \"QUIT\" in flags_list:",
        "detail": "framework.core.events_handler",
        "documentation": {}
    },
    {
        "label": "RunTime",
        "kind": 6,
        "importPath": "framework.core.runtime_class",
        "description": "framework.core.runtime_class",
        "peekOfCode": "class RunTime:\n    \"\"\"\n    The RunTime class is responsible for managing the game loop and rendering the game scene.\n    It initializes the game window, handles events, and updates the game state.\n    \"\"\"\n    def __init__(self, engine: \"Engine\", runtimefile: str) -> None:\n        self.engine = engine\n        self.runtimefile = runtimefile\n        self.sandbox = {}\n        exec(open(self.runtimefile, \"r\").read(), self.sandbox)",
        "detail": "framework.core.runtime_class",
        "documentation": {}
    },
    {
        "label": "StartUp",
        "kind": 6,
        "importPath": "framework.core.startup_class",
        "description": "framework.core.startup_class",
        "peekOfCode": "class StartUp:\n    def __init__(self, engine: \"Engine\", startupfile: str) -> None:\n        self.engine = engine\n        self.startupfile = startupfile\n    def initialize(self):\n        \"\"\"\n        Initialize the game engine.\n        This method should be called before starting the game loop.\n        \"\"\"\n        with open(self.startupfile, \"r+\") as file:",
        "detail": "framework.core.startup_class",
        "documentation": {}
    },
    {
        "label": "Game_Object",
        "kind": 6,
        "importPath": "framework.game_object.game_object",
        "description": "framework.game_object.game_object",
        "peekOfCode": "class Game_Object:\n    def __init__(self, name: str, components: str = \"\") -> None:\n        from pygame.math import Vector2\n        from framework.containers.object_container import ObjectContainer\n        temp_components: list[str] = []\n        current_component: str = \"\"\n        for i in components:\n            if i not in [\"\", \" \", \"|\"]:\n                current_component += i\n            if i == \"|\":",
        "detail": "framework.game_object.game_object",
        "documentation": {}
    },
    {
        "label": "Renderer",
        "kind": 6,
        "importPath": "framework.renderers.renderer",
        "description": "framework.renderers.renderer",
        "peekOfCode": "class Renderer:\n    def __init__(self, window: \"Window\") -> None:\n        self.window = window\n    def fill(self, color: tuple[int, int, int]) -> None:\n        self.window.pgwindow.get_surface().fill(color)\n    def update(self) -> None:\n        self.window.pgwindow.flip()\n    def render_scene(self, scene: \"Scene\") -> None:\n        for game_object in scene.contents.__dict__.values():\n            game_object.components.__dict__[\"Image_Component\"].render(self.window.pgwindow.get_surface())",
        "detail": "framework.renderers.renderer",
        "documentation": {}
    },
    {
        "label": "Scene",
        "kind": 6,
        "importPath": "framework.scenes.scene",
        "description": "framework.scenes.scene",
        "peekOfCode": "class Scene:\n    def __init__(self, name: str) -> None:\n        from framework.containers.object_container import ObjectContainer\n        self.name = name\n        self.contents = ObjectContainer()\n    def add_object(self, game_object: 'Game_Object') -> None:\n        \"\"\"Adds a game object to the scene.\"\"\"\n        self.contents.__setattr__(game_object.name, game_object)",
        "detail": "framework.scenes.scene",
        "documentation": {}
    },
    {
        "label": "return_flags",
        "kind": 2,
        "importPath": "framework.underhood.flags_handler",
        "description": "framework.underhood.flags_handler",
        "peekOfCode": "def return_flags(flags: str) -> list[str]:\n    \"\"\"\n    Returns a list of flags from a string.\n    Args:\n        flags (str): A string containing flags separated by '|'.\n    Returns:\n        list[str]: A list of flags.\n    \"\"\"\n    return [flag.strip() for flag in flags.split('|') if flag.strip()] if flags else []",
        "detail": "framework.underhood.flags_handler",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "framework.windows.window",
        "description": "framework.windows.window",
        "peekOfCode": "class Window:\n    def __init__(self, title: str, size: Tuple[int, int], position: Tuple[int, int]) -> None:\n        from framework.renderers.renderer import Renderer\n        self.size = list(size)\n        self.position = list(position)\n        self.title = title\n        self.renderer: Renderer = Renderer(window=self)\n        # Create the pygame window with the specified title, size, and position\n        self.pgwindow = WINDOW(title=self.title, size=self.size, position=self.position)\n        self.pgwindow.get_surface().fill((0, 0, 0))  # Fill the window with black color",
        "detail": "framework.windows.window",
        "documentation": {}
    },
    {
        "label": "Window_Manager",
        "kind": 6,
        "importPath": "framework.windows.window_manager",
        "description": "framework.windows.window_manager",
        "peekOfCode": "class Window_Manager:\n    def __init__(self):\n        from framework.containers.object_container import ObjectContainer\n        self.windows = ObjectContainer()\n    def add_window(self, window: 'Window') -> None:\n        setattr(self.windows, window.title, window)\n    def remove_window(self, title: str) -> None:\n        if hasattr(self.windows, title):\n            delattr(self.windows, title)\n    def get_window(self, title: str) -> tuple[bool, Window | None]:",
        "detail": "framework.windows.window_manager",
        "documentation": {}
    },
    {
        "label": "logic",
        "kind": 2,
        "importPath": "runtime",
        "description": "runtime",
        "peekOfCode": "def logic():\n    \"\"\"\n    This function contains the game logic that will be executed in each frame.\n    It can be used to update game objects, handle events, and manage the game state.\n    \"\"\"\n    pass",
        "detail": "runtime",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "startup",
        "description": "startup",
        "peekOfCode": "engine = self.engine\nimport pygame\nfrom framework.windows.window_manager import Window_Manager\nfrom framework.windows.window import Window\nfrom framework.scenes.scene import Scene\nfrom framework.core.events_handler import Events_Handler\nfrom framework.game_object.game_object import Game_Object\nengine.clock = pygame.time.Clock()\nengine.WINDOW_MANAGER = Window_Manager()\nengine.WINDOW_MANAGER.add_window(window = Window(title=\"Test_Window\", size=(800, 600), position=(100, 100)))",
        "detail": "startup",
        "documentation": {}
    },
    {
        "label": "engine.clock",
        "kind": 5,
        "importPath": "startup",
        "description": "startup",
        "peekOfCode": "engine.clock = pygame.time.Clock()\nengine.WINDOW_MANAGER = Window_Manager()\nengine.WINDOW_MANAGER.add_window(window = Window(title=\"Test_Window\", size=(800, 600), position=(100, 100)))\nengine.obj1 = Game_Object(name=\"Test_Object\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self) | Velocity_Component() |\")\nengine.obj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nengine.scene = Scene(\"Scene 1\")\nengine.scene.add_object(engine.obj1)\nengine.scene.add_object(engine.obj2)\nengine.EVENTS_HANDLER = Events_Handler()",
        "detail": "startup",
        "documentation": {}
    },
    {
        "label": "engine.WINDOW_MANAGER",
        "kind": 5,
        "importPath": "startup",
        "description": "startup",
        "peekOfCode": "engine.WINDOW_MANAGER = Window_Manager()\nengine.WINDOW_MANAGER.add_window(window = Window(title=\"Test_Window\", size=(800, 600), position=(100, 100)))\nengine.obj1 = Game_Object(name=\"Test_Object\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self) | Velocity_Component() |\")\nengine.obj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nengine.scene = Scene(\"Scene 1\")\nengine.scene.add_object(engine.obj1)\nengine.scene.add_object(engine.obj2)\nengine.EVENTS_HANDLER = Events_Handler()",
        "detail": "startup",
        "documentation": {}
    },
    {
        "label": "engine.WINDOW_MANAGER.add_window(window",
        "kind": 5,
        "importPath": "startup",
        "description": "startup",
        "peekOfCode": "engine.WINDOW_MANAGER.add_window(window = Window(title=\"Test_Window\", size=(800, 600), position=(100, 100)))\nengine.obj1 = Game_Object(name=\"Test_Object\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self) | Velocity_Component() |\")\nengine.obj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nengine.scene = Scene(\"Scene 1\")\nengine.scene.add_object(engine.obj1)\nengine.scene.add_object(engine.obj2)\nengine.EVENTS_HANDLER = Events_Handler()",
        "detail": "startup",
        "documentation": {}
    },
    {
        "label": "engine.obj1",
        "kind": 5,
        "importPath": "startup",
        "description": "startup",
        "peekOfCode": "engine.obj1 = Game_Object(name=\"Test_Object\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self) | Velocity_Component() |\")\nengine.obj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nengine.scene = Scene(\"Scene 1\")\nengine.scene.add_object(engine.obj1)\nengine.scene.add_object(engine.obj2)\nengine.EVENTS_HANDLER = Events_Handler()",
        "detail": "startup",
        "documentation": {}
    },
    {
        "label": "engine.obj2",
        "kind": 5,
        "importPath": "startup",
        "description": "startup",
        "peekOfCode": "engine.obj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nengine.scene = Scene(\"Scene 1\")\nengine.scene.add_object(engine.obj1)\nengine.scene.add_object(engine.obj2)\nengine.EVENTS_HANDLER = Events_Handler()",
        "detail": "startup",
        "documentation": {}
    },
    {
        "label": "engine.scene",
        "kind": 5,
        "importPath": "startup",
        "description": "startup",
        "peekOfCode": "engine.scene = Scene(\"Scene 1\")\nengine.scene.add_object(engine.obj1)\nengine.scene.add_object(engine.obj2)\nengine.EVENTS_HANDLER = Events_Handler()",
        "detail": "startup",
        "documentation": {}
    },
    {
        "label": "engine.EVENTS_HANDLER",
        "kind": 5,
        "importPath": "startup",
        "description": "startup",
        "peekOfCode": "engine.EVENTS_HANDLER = Events_Handler()",
        "detail": "startup",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "tester",
        "description": "tester",
        "peekOfCode": "clock = pygame.time.Clock()\nwinmanager = Window_Manager()\nwinmanager.add_window(window = Window(title=\"Test_Window\", size=(800, 600), position=(100, 100)))\nobj1 = Game_Object(name=\"Test_Object\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self) | Velocity_Component() |\")\nobj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nscene = Scene(\"Scene 1\")\nscene.add_object(obj1)\nscene.add_object(obj2)\nev_handler = Events_Handler()\nwhile True:",
        "detail": "tester",
        "documentation": {}
    },
    {
        "label": "winmanager",
        "kind": 5,
        "importPath": "tester",
        "description": "tester",
        "peekOfCode": "winmanager = Window_Manager()\nwinmanager.add_window(window = Window(title=\"Test_Window\", size=(800, 600), position=(100, 100)))\nobj1 = Game_Object(name=\"Test_Object\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self) | Velocity_Component() |\")\nobj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nscene = Scene(\"Scene 1\")\nscene.add_object(obj1)\nscene.add_object(obj2)\nev_handler = Events_Handler()\nwhile True:\n    for win in winmanager.get_all_windows().values():",
        "detail": "tester",
        "documentation": {}
    },
    {
        "label": "winmanager.add_window(window",
        "kind": 5,
        "importPath": "tester",
        "description": "tester",
        "peekOfCode": "winmanager.add_window(window = Window(title=\"Test_Window\", size=(800, 600), position=(100, 100)))\nobj1 = Game_Object(name=\"Test_Object\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self) | Velocity_Component() |\")\nobj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nscene = Scene(\"Scene 1\")\nscene.add_object(obj1)\nscene.add_object(obj2)\nev_handler = Events_Handler()\nwhile True:\n    for win in winmanager.get_all_windows().values():\n        win.renderer.fill((0, 0, 0))",
        "detail": "tester",
        "documentation": {}
    },
    {
        "label": "obj1",
        "kind": 5,
        "importPath": "tester",
        "description": "tester",
        "peekOfCode": "obj1 = Game_Object(name=\"Test_Object\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self) | Velocity_Component() |\")\nobj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nscene = Scene(\"Scene 1\")\nscene.add_object(obj1)\nscene.add_object(obj2)\nev_handler = Events_Handler()\nwhile True:\n    for win in winmanager.get_all_windows().values():\n        win.renderer.fill((0, 0, 0))\n    winmanager.get_window(\"Test_Window\")[1].renderer.render_scene(scene)",
        "detail": "tester",
        "documentation": {}
    },
    {
        "label": "obj2",
        "kind": 5,
        "importPath": "tester",
        "description": "tester",
        "peekOfCode": "obj2 = Game_Object(name=\"Test_Object2\", components = \"Image_Component(image_path='image.png', game_object=self) | CFrame_Component(game_object=self, position=Vector2(200, 200)) |\")\nscene = Scene(\"Scene 1\")\nscene.add_object(obj1)\nscene.add_object(obj2)\nev_handler = Events_Handler()\nwhile True:\n    for win in winmanager.get_all_windows().values():\n        win.renderer.fill((0, 0, 0))\n    winmanager.get_window(\"Test_Window\")[1].renderer.render_scene(scene)\n    obj1.components.Velocity_Component.x += 0.25",
        "detail": "tester",
        "documentation": {}
    },
    {
        "label": "scene",
        "kind": 5,
        "importPath": "tester",
        "description": "tester",
        "peekOfCode": "scene = Scene(\"Scene 1\")\nscene.add_object(obj1)\nscene.add_object(obj2)\nev_handler = Events_Handler()\nwhile True:\n    for win in winmanager.get_all_windows().values():\n        win.renderer.fill((0, 0, 0))\n    winmanager.get_window(\"Test_Window\")[1].renderer.render_scene(scene)\n    obj1.components.Velocity_Component.x += 0.25\n    obj1.components.Velocity_Component.y += 0.25",
        "detail": "tester",
        "documentation": {}
    },
    {
        "label": "ev_handler",
        "kind": 5,
        "importPath": "tester",
        "description": "tester",
        "peekOfCode": "ev_handler = Events_Handler()\nwhile True:\n    for win in winmanager.get_all_windows().values():\n        win.renderer.fill((0, 0, 0))\n    winmanager.get_window(\"Test_Window\")[1].renderer.render_scene(scene)\n    obj1.components.Velocity_Component.x += 0.25\n    obj1.components.Velocity_Component.y += 0.25\n    obj1.components.CFrame_Component.x += obj1.components.Velocity_Component.x\n    obj1.components.CFrame_Component.y += obj1.components.Velocity_Component.y\n    obj2.components.CFrame_Component.x += 1",
        "detail": "tester",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "tester2",
        "description": "tester2",
        "peekOfCode": "engine = Engine(startupfile=\"C:\\\\Users\\\\Henry Watts\\\\UserDocuments\\\\Github\\\\Pygame Framework\\\\startup.py\", runtimefile=\"runtime.py\")\nengine.play()",
        "detail": "tester2",
        "documentation": {}
    }
]